/*
 * Copyright (c) 2012, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package ${packageName};

import java.util.ResourceBundle;
import java.io.IOException;
import java.io.InputStream;

import javax.inject.Named;
import javax.inject.Singleton;

import org.glassfish.api.logging.BaseLoggerInfoMetadataService;
import org.glassfish.api.logging.LoggerInfoMetadata;
import org.glassfish.hk2.api.PostConstruct;

import org.jvnet.hk2.annotations.Service;

@Service @Named("modular")
@Singleton
public class ${simpleName} extends BaseLoggerInfoMetadataService {

    private static final String RBNAME = "LoggerInfoMetadata.properties";
    
    public void postConstruct() throws IOException {
        InputStream inputStream = getClass().getResourceAsStream(RBNAME);
        if (inputStream != null) {
            super.initializeMetadata(inputStream);        
        } else {
            throw new IOException("Resource not found: " + RBNAME + " for class " + getClass().getName());
        }
    }

}
